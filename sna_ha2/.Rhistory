dgout <- degree(subgraph1, mode = "out")
V(subgraph1)[which(dgin>dgout)]$color <- "red"
V(subgraph1)[which(dgin==dgout)]$color <- "green"
V(subgraph1)[which(dgin<dgout)]$color <- "blue"
tr <- transitivity(subgraph1, type = "local", isolates = "zero")
V(subgraph1)$size <- ifelse(tr==1, 30, 10)
plot(subgraph1)
## Put your code here
con_com <- clusters(subgraph1, mode = "weak")
V(subgraph1)$membership <- clusters(subgraph1, mode = "weak")$membership
subg_new <- induced.subgraph(subgraph1, V(subgraph1)[membership==4])
dpath <- get.diameter(subg_new)
E(subg_new, path = dpath)$color <- "black"
V(subg_new)$color <- " green"
plot(subg_new, vertex.size= 10)
path.length.hist(subg_new, directed = TRUE)
## Put your code here
# get average neighbour degree
avnd <- graph.knn(subgraph1)$knn
# get node degree
nd <- degree(subgraph1)
# scatter plot
plot(avnd, nd, xlab = "node degree", ylab = "average neighbour degree")
agg_avnd <- c()
index = 1
for (d in unique(nd)) {
agg_avnd[index] <- sum(avnd[which(nd==d)])/length(which(nd==d))
index = index + 1
}
plot(unique(nd), agg_avnd, main = "Aggregated plot", xlab = "node degree", ylab = "average neighbour")
## Put your code here
# get local clustering coeff
lcc<- transitivity(subgraph1, type = "local", isolates = "zero")
# get node degree
nd <- degree(subgraph1)
# scatter plot
plot(lcc, nd, xlab = "node degree", ylab = "local clustering coeff")
agg_lcc <- c()
index = 1
for (d in unique(nd)) {
agg_lcc[index] <- sum(lcc[which(nd==d)])/length(which(nd==d))
index = index + 1
}
plot(unique(nd), agg_lcc, main = "Aggregated plot", xlab = "node degree", ylab = "average local clustering coeff")
library(igraph)
## Put your code here
read_graph("pcb.gdf", format = c("graphml"))
setwd
setwd("I:/HSE/HSE/Big Data Systems/Social Network Analysis/SNA Home Assignment 2/sna")
## Put your code here
vknet = read.gexf("vk-friends-2.gexf")
library(igraph)
library(rgexf)
library(ggplot2)
library(R.matlab)
install.packages("R.matlab")
library(igraph)
library(rgexf)
library(ggplot2)
library(R.matlab)
## Put your code here
vknet = read.gexf("vk-friends-2.gexf")
vkfg <- gexf.to.igraph(vknet)
#Hide origional names of vertices
gvc <- vcount(vkfg)
gec <- ecount(vkfg)
vkfg_adj_mat <- get.adjacency(vkfg)
vkfg_adj_mat_names <- 1:gvc
colnames(vkfg_adj_mat) <- vkfg_adj_mat_names
row.names(vkfg_adj_mat) <- colnames(vkfg_adj_mat)
vkfg <- graph.adjacency(vkfg_adj_mat, add.colnames = "T")
## Put your code here
degcen <- centralization.degree(vkfg)
closecen <- centralization.closeness(vkfg, mode="all")
betcen <- centralization.betweenness (vkfg, directed = TRUE, nobigint = TRUE)
ev_cen <- centralization.evcent (vkfg, directed = TRUE, scale = FALSE, options = igraph.arpack.default)
degcen$centralization
closecen$centralization
betcen$centralization
ev_cen$centralization
## Put your code here
deg<-degree(vkfg)
lay <- layout.fruchterman.reingold(vkfg)
fine = 500
palette2 <- colorRampPalette(c('blue','red'))
degCol <- palette2(fine)[as.numeric(cut(deg,breaks = fine))]
vert_size <- ifelse(deg>30, 1/30*deg, 1)
par(mfrow=c(1,1))
plot(vkfg, layout=lay, vertex.color=degCol, vertex.size=vert_size*10, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Degree centrality")
## Put your code here
deg<-degree(vkfg)
lay <- layout.fruchterman.reingold(vkfg)
fine = 500
palette2 <- colorRampPalette(c('blue','red'))
degCol <- palette2(fine)[as.numeric(cut(deg,breaks = fine))]
vert_size <- ifelse(deg>30, 1/30*deg, 1)
par(mfrow=c(1,1))
plot(vkfg, layout=lay, vertex.color=degCol, vertex.size=vert_size, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Degree centrality")
clos <- closeness(vkfg)
closCol = palette2(fine)[as.numeric(cut(clos,breaks = fine))]
plot(vkfg,layout = lay, vertex.label=NA, vertex.color=closCol, vertex.size=clos*23000, edge.width = 0.5, edge.arrow.size = 0.5, main="Closeness centrality")
betw <- betweenness(vkfg)
betwCol = palette2(fine)[as.numeric(cut(betw,breaks = fine))]
vert_size <- ifelse(betw>210, 1/210*betw, 1)
plot(vkfg,layout = lay, vertex.color=betwCol, vertex.size=vert_size*10, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Betwenness centrality")
betw <- betweenness(vkfg)
betwCol = palette2(fine)[as.numeric(cut(betw,breaks = fine))]
vert_size <- ifelse(betw>210, 1/210*betw, 1)
plot(vkfg,layout = lay, vertex.color=betwCol, vertex.size=vert_size*5, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Betwenness centrality")
betw <- betweenness(vkfg)
betwCol = palette2(fine)[as.numeric(cut(betw,breaks = fine))]
vert_size <- ifelse(betw>210, 1/210*betw, 1)
plot(vkfg,layout = lay, vertex.color=betwCol, vertex.size=vert_size*15, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Betwenness centrality")
ev <- evcent(vkfg)$vector
evCol = palette2(fine)[as.numeric(cut(ev,breaks = fine))]
vert_size <- ifelse(ev>0.15, 5*ev, 0.8)
plot(vkfg,layout = lay, vertex.size=vert_size*10, vertex.color=evCol, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Eigenvector centrality")
top101 <- sort(deg, decreasing = TRUE)[1:10]
top102 <- sort(clos, decreasing = TRUE)[1:10]
top103 <- sort(betw, decreasing = TRUE)[1:10]
top104 <- sort(ev, decreasing = TRUE)[1:10]
sort(deg, decreasing = TRUE)[1:10]
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
bon_cen <- bonpow(vkfg)
sort(deg, decreasing = TRUE)[1:10]
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
## Put your code here
vkfg_degree <- degree(vkfg)
vkfg_degree <- vkfg_degree+1
dmax <- max(vkfg_degree)
dmin <- min(vkfg_degree)
drange <- as.numeric(dmin:dmax)
degree_dist <- degree.distribution(vkfg)[drange]
pl_fit <- power.law.fit(vkfg_degree, xmin = NULL, implementation = "plfit")
alpha <- pl_fit$alpha
xmin <- pl_fit$xmin
C <- (alpha-1)* xmin^(alpha-1)
pldf <- function(x) return(C*x^(-alpha))
plot(degree_dist, log = 'xy', main = "VK friends graph distribution", xlab = " node degree log", ylab = " Degree distribution log" )
par(new = T)
curve(pldf, from = dmin, to = dmax, log="xy", main = "", xlab = "", ylab = "", col = "red", axes = F, add = F)
pl_fit$KS.p
## Put your code here
er_graph <- erdos.renyi.game(gvc, gec, type = "gnm")
degree_dist_erg <- degree.distribution(er_graph)
plot(degree_dist, log = "xy", main = " VK friend graph Vs Erdos-renyi graph", xlab = "Node Degree log", ylab = " Degree distribution log")
par(new = T)
plot(degree_dist_erg, log = "xy" ,main =" ", col= "red", axes = F)
bon_cen <- bonpow(vkfg)
alpha_cen <- alpha.centrality(vkfg)
## Put your code here
vknet = read.gexf("vk-friends.gexf")
vkfg <- gexf.to.igraph(vknet)
#Hide origional names of vertices
gvc <- vcount(vkfg)
gec <- ecount(vkfg)
vkfg_adj_mat <- get.adjacency(vkfg)
vkfg_adj_mat_names <- 1:gvc
colnames(vkfg_adj_mat) <- vkfg_adj_mat_names
row.names(vkfg_adj_mat) <- colnames(vkfg_adj_mat)
vkfg <- graph.adjacency(vkfg_adj_mat, add.colnames = "T")
## Put your code here
vkfg_degree <- degree(vkfg)
vkfg_degree <- vkfg_degree+1
dmax <- max(vkfg_degree)
dmin <- min(vkfg_degree)
drange <- as.numeric(dmin:dmax)
degree_dist <- degree.distribution(vkfg)[drange]
pl_fit <- power.law.fit(vkfg_degree, xmin = NULL, implementation = "plfit")
alpha <- pl_fit$alpha
xmin <- pl_fit$xmin
C <- (alpha-1)* xmin^(alpha-1)
pldf <- function(x) return(C*x^(-alpha))
plot(degree_dist, log = 'xy', main = "VK friends graph distribution", xlab = " node degree log", ylab = " Degree distribution log" )
par(new = T)
curve(pldf, from = dmin, to = dmax, log="xy", main = "", xlab = "", ylab = "", col = "red", axes = F, add = F)
## Put your code here
er_graph <- erdos.renyi.game(gvc, gec, type = "gnm")
degree_dist_erg <- degree.distribution(er_graph)
plot(degree_dist, log = "xy", main = " VK friend graph Vs Erdos-renyi graph", xlab = "Node Degree log", ylab = " Degree distribution log")
par(new = T)
plot(degree_dist_erg, log = "xy" ,main =" ", col= "red", axes = F)
## Put your code here
degcen <- centralization.degree(vkfg)
closecen <- centralization.closeness(vkfg, mode="all")
betcen <- centralization.betweenness (vkfg, directed = TRUE, nobigint = TRUE)
ev_cen <- centralization.evcent (vkfg, directed = TRUE, scale = FALSE, options = igraph.arpack.default)
degcen$centralization
closecen$centralization
betcen$centralization
ev_cen$centralization
## Put your code here
deg<-degree(vkfg)
lay <- layout.fruchterman.reingold(vkfg)
fine = 500
palette2 <- colorRampPalette(c('blue','red'))
degCol <- palette2(fine)[as.numeric(cut(deg,breaks = fine))]
vert_size <- ifelse(deg>30, 1/30*deg, 1)
par(mfrow=c(1,1))
plot(vkfg, layout=lay, vertex.color=degCol, vertex.size=vert_size, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Degree centrality")
## Put your code here
deg<-degree(vkfg)
lay <- layout.fruchterman.reingold(vkfg)
fine = 500
palette2 <- colorRampPalette(c('blue','red'))
degCol <- palette2(fine)[as.numeric(cut(deg,breaks = fine))]
vert_size <- ifelse(deg>30, 1/30*deg, 1)
par(mfrow=c(1,1))
plot(vkfg, layout=lay, vertex.color=degCol, vertex.size=vert_size, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Degree centrality")
clos <- closeness(vkfg)
closCol = palette2(fine)[as.numeric(cut(clos,breaks = fine))]
plot(vkfg,layout = lay, vertex.label=NA, vertex.color=closCol, vertex.size=clos*23000, edge.width = 0.5, edge.arrow.size = 0.5, main="Closeness centrality")
betw <- betweenness(vkfg)
betwCol = palette2(fine)[as.numeric(cut(betw,breaks = fine))]
vert_size <- ifelse(betw>210, 1/210*betw, 1)
plot(vkfg,layout = lay, vertex.color=betwCol, vertex.size=vert_size*15, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Betwenness centrality")
ev <- evcent(vkfg)$vector
evCol = palette2(fine)[as.numeric(cut(ev,breaks = fine))]
vert_size <- ifelse(ev>0.15, 5*ev, 0.8)
plot(vkfg,layout = lay, vertex.size=vert_size*10, vertex.color=evCol, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Eigenvector centrality")
bon_cen <- bonpow(vkfg)
evCol = palette2(fine)[as.numeric(cut(bon_cen,breaks = fine))]
vert_size <- ifelse(bon_cen>0.15, 5*ev, 0.8)
plot(vkfg,layout = lay, vertex.size=vert_size*10, vertex.color=evCol, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Eigenvector centrality")
alpha_cen <- alpha.centrality(vkfg)
bon_cen <- bonpow(vkfg)
evCol = palette2(fine)[as.numeric(cut(bon_cen,breaks = fine))]
vert_size <- ifelse(bon_cen>0.15, 5*ev, 0.8)
plot(vkfg,layout = lay, vertex.size=vert_size*10, vertex.color=evCol, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Bonacich power centrality")
alpha_cen <- alpha.centrality(vkfg)
alpha_cen <- alpha.centrality(vkfg)
evCol = palette2(fine)[as.numeric(cut(alpha_cen,breaks = fine))]
vert_size <- ifelse(alpha_cen>0.15, 5*ev, 0.8)
plot(vkfg,layout = lay, vertex.size=vert_size*10, vertex.color=evCol, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5,
main=" alpha centrality")
sort(deg, decreasing = TRUE)[1:10]
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(deg, decreasing = TRUE)[1:10]
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(deg, decreasing = TRUE)[1:10]
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(bon_cen, decreasing = TRUE)[1:10]
sort(alpha_cen, decreasing = TRUE)[1:10]
deg_cen <-sort(deg, decreasing = TRUE)[1:10]
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(bon_cen, decreasing = TRUE)[1:10]
sort(alpha_cen, decreasing = TRUE)[1:10]
g.deg.cent.top10 <-sort(deg, decreasing = TRUE)[1:10]
g.deg.cent.top10.mat = cbind(func_before.space( vkfg.v.names[g.deg.cent.top10] ), g.deg.cent.top10)
func_before.space = function(s) sub("\\s.*", "", s)
g.deg.cent.top10 <-sort(deg, decreasing = TRUE)[1:10]
g.deg.cent.top10.mat = cbind(func_before.space( vkfg.v.names[g.deg.cent.top10] ), g.deg.cent.top10)
func_before.space = function(s) sub("\\s.*", "", s)
g.deg.cent.top10 <-sort(deg, decreasing = TRUE)[1:10]
g.deg.cent.top10.mat = cbind(func_before.space( vkfg$v[g.deg.cent.top10] ), g.deg.cent.top10)
colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
func_before.space = function(s) sub("\\s.*", "", s)
options(xtable.comment = F)
func_print.custom.xtable = function(m)
print(xtable(m), floating = F, type = "latex", include.rownames = F)
g.deg.cent.top10 <-sort(deg, decreasing = TRUE)[1:10]
g.deg.cent.top10.mat = cbind(func_before.space( vkfg$v[g.deg.cent.top10] ), g.deg.cent.top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
func_print.custom.xtable(g.deg.cent.top10.mat)
library(igraph)
library(rgexf)
library(ggplot2)
library(R.matlab)
library(xtable)
func_before.space = function(s) sub("\\s.*", "", s)
options(xtable.comment = F)
func_print.custom.xtable = function(m)
print(xtable(m), floating = F, type = "latex", include.rownames = F)
g.deg.cent.top10 <-sort(deg, decreasing = TRUE)[1:10]
g.deg.cent.top10.mat = cbind(func_before.space( vkfg$v[g.deg.cent.top10] ), g.deg.cent.top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
func_print.custom.xtable(g.deg.cent.top10.mat)
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(bon_cen, decreasing = TRUE)[1:10]
sort(alpha_cen, decreasing = TRUE)[1:10]
func_before.space = function(s) sub("\\s.*", "", s)
options(xtable.comment = F)
func_print.custom.xtable = function(m)
print(xtable(m), floating = F, type = "latex", include.rownames = F)
g.deg.cent.top10 <-sort(deg, decreasing = TRUE)[1:10]
g.deg.cent.top10.mat = cbind(vkfg$v[g.deg.cent.top10] , g.deg.cent.top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
func_print.custom.xtable(g.deg.cent.top10.mat)
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(bon_cen, decreasing = TRUE)[1:10]
sort(alpha_cen, decreasing = TRUE)[1:10]
func_before.space = function(s) sub("\\s.*", "", s)
options(xtable.comment = F)
func_print.custom.xtable = function(m)
print(xtable(m), floating = F, type = "latex", include.rownames = F)
g.deg.cent.top10 <-sort(deg, decreasing = TRUE)[1:10]
g.deg.cent.top10.mat = cbind(vkfg$v[g.deg.cent.top10] , g.deg.cent.top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
print(g.deg.cent.top10.mat)
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(bon_cen, decreasing = TRUE)[1:10]
sort(alpha_cen, decreasing = TRUE)[1:10]
deg_cent_top10 <-sort(deg, decreasing = TRUE)[1:10]
g.deg.cent.top10.mat = cbind(vkfg$v[deg_cent_top10] , deg_cent_top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
print(g.deg.cent.top10.mat)
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(bon_cen, decreasing = TRUE)[1:10]
sort(alpha_cen, decreasing = TRUE)[1:10]
deg_cent_top10 <-sort(deg, decreasing = TRUE)[1:10]
deg_cent_top10.mat = cbind(vkfg$v[deg_cent_top10] , deg_cent_top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
print(deg_cent_top10.mat)
sort(clos, decreasing = TRUE)[1:10]
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(bon_cen, decreasing = TRUE)[1:10]
sort(alpha_cen, decreasing = TRUE)[1:10]
deg_cent_top10 <-sort(deg, decreasing = TRUE)[1:10]
deg_cent_top10.mat = cbind(vkfg$v[deg_cent_top10] , deg_cent_top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
print(deg_cent_top10.mat)
clos_cent_top10 <- sort(clos, decreasing = TRUE)[1:10]
deg_cent_top10.mat = cbind(vkfg$v[clos_cent_top10] , clos_cent_top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
print(clos_cent_top10.mat)
deg_cent_top10 <-sort(deg, decreasing = TRUE)[1:10]
deg_cent_top10.mat = cbind(vkfg$v[deg_cent_top10] , deg_cent_top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
print(deg_cent_top10.mat)
clos_cent_top10 <- sort(clos, decreasing = TRUE)[1:10]
clos_cent_top10.mat = cbind(vkfg$v[clos_cent_top10] , clos_cent_top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
print(clos_cent_top10.mat)
sort(betw, decreasing = TRUE)[1:10]
sort(ev, decreasing = TRUE)[1:10]
sort(bon_cen, decreasing = TRUE)[1:10]
sort(alpha_cen, decreasing = TRUE)[1:10]
deg_cent_top10 <-sort(deg, decreasing = TRUE)[1:10]
deg_cent_top10.mat = cbind(vkfg$v[deg_cent_top10] , deg_cent_top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
print(deg_cent_top10.mat)
clos_cent_top10 <- sort(clos, decreasing = TRUE)[1:10]
clos_cent_top10.mat = cbind(vkfg$v[clos_cent_top10] , clos_cent_top10)
print(clos_cent_top10.mat)
betcent<-sort(betw, decreasing = TRUE)[1:10]
bet_cent_top10.mat = cbind(vkfg$v[betcent] , betcent)
print(bet_cent_top10.mat)
evcent <- sort(ev, decreasing = TRUE)[1:10]
ev_cent_top10.mat = cbind(vkfg$v[evcent] , evcent)
print(ev_cent_top10.mat)
boncent<-sort(bon_cen, decreasing = TRUE)[1:10]
boncent_top10.mat = cbind(vkfg$v[boncent] , boncent)
print(boncent_top10.mat)
alcent<-sort(alpha_cen, decreasing = TRUE)[1:10]
al_cent_top10.mat = cbind(vkfg$v[alcent] , alcent)
print(al_cent_top10.mat)
## Put your code here
deg_cen <- degree(vkfg)
clos_cen <- closeness(vkfg)
betw_ceb <- betweenness(vkfg)
ev_cen <- evcent(vkfg)
bon_cen <- bonpow(vkfg)
alpha_cen <- alpha.centrality(vkfg)
## Put your code here
vkfg <- gexf.to.igraph(read.gexf("vk-friends-2.gexf"))
## Put your code here
vkfg <- gexf.to.igraph(read.gexf("vk-friends-2.gexf"))
bon_cen <- bonpow(vkfg2)
# I got some errors while calculating alpha and bonacich centrality when using vk-friends.gexf-2. So, I tired a new social graph for alpha and bonacich centrality
vknet2 = read.gexf("vk-friends.gexf")
vkfg2 <- gexf.to.igraph(vknet2)
#Hide origional names of vertices
gvc2 <- vcount(vkfg2)
gec2 <- ecount(vkfg2)
vkfg_adj_mat2 <- get.adjacency(vkfg2)
vkfg_adj_mat_names2 <- 1:gvc2
colnames(vkfg_adj_mat2) <- vkfg_adj_mat_names2
row.names(vkfg_adj_mat2) <- colnames(vkfg_adj_mat2)
vkfg2 <- graph.adjacency(vkfg_adj_mat2, add.colnames = "T")
bon_cen <- bonpow(vkfg2)
evCol = palette2(fine)[as.numeric(cut(bon_cen,breaks = fine))]
vert_size <- ifelse(bon_cen>0.15, 5*ev, 0.8)
plot(vkfg,layout = lay, vertex.size=vert_size*10, vertex.color=evCol, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Bonacich power centrality")
alpha_cen <- alpha.centrality(vkfg2)
evCol = palette2(fine)[as.numeric(cut(alpha_cen,breaks = fine))]
vert_size <- ifelse(alpha_cen>0.15, 5*ev, 0.8)
plot(vkfg,layout = lay, vertex.size=vert_size*10, vertex.color=evCol, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5,
main=" alpha centrality")
deg_cent_top10 <-sort(deg, decreasing = TRUE)[1:10]
deg_cent_top10.mat = cbind(vkfg$v[deg_cent_top10] , deg_cent_top10)
#colnames(g.deg.cent.top10.mat) = c("Node", "Degree Centrality")
print(deg_cent_top10.mat)
clos_cent_top10 <- sort(clos, decreasing = TRUE)[1:10]
clos_cent_top10.mat = cbind(vkfg$v[clos_cent_top10] , clos_cent_top10)
print(clos_cent_top10.mat)
betcent<-sort(betw, decreasing = TRUE)[1:10]
bet_cent_top10.mat = cbind(vkfg$v[betcent] , betcent)
print(bet_cent_top10.mat)
evcent <- sort(ev, decreasing = TRUE)[1:10]
ev_cent_top10.mat = cbind(vkfg$v[evcent] , evcent)
print(ev_cent_top10.mat)
boncent<-sort(bon_cen, decreasing = TRUE)[1:10]
boncent_top10.mat = cbind(vkfg$v[boncent] , boncent)
print(boncent_top10.mat)
alcent<-sort(alpha_cen, decreasing = TRUE)[1:10]
al_cent_top10.mat = cbind(vkfg$v[alcent] , alcent)
print(al_cent_top10.mat)
## Put your code here
vknet = read.gexf("vk-friends-2.gexf")
vkfg <- gexf.to.igraph(vknet)
#Hide origional names of vertices
gvc <- vcount(vkfg)
gec <- ecount(vkfg)
vkfg_adj_mat <- get.adjacency(vkfg)
vkfg_adj_mat_names <- 1:gvc
colnames(vkfg_adj_mat) <- vkfg_adj_mat_names
row.names(vkfg_adj_mat) <- colnames(vkfg_adj_mat)
vkfg <- graph.adjacency(vkfg_adj_mat, add.colnames = "T")
## Put your code here
vkfg_degree <- degree(vkfg)
vkfg_degree <- vkfg_degree+1
dmax <- max(vkfg_degree)
dmin <- min(vkfg_degree)
drange <- as.numeric(dmin:dmax)
degree_dist <- degree.distribution(vkfg)[drange]
pl_fit <- power.law.fit(vkfg_degree, xmin = NULL, implementation = "plfit")
alpha <- pl_fit$alpha
xmin <- pl_fit$xmin
C <- (alpha-1)* xmin^(alpha-1)
pldf <- function(x) return(C*x^(-alpha))
plot(degree_dist, log = 'xy', main = "VK friends graph distribution", xlab = " node degree log", ylab = " Degree distribution log" )
par(new = T)
curve(pldf, from = dmin, to = dmax, log="xy", main = "", xlab = "", ylab = "", col = "red", axes = F, add = F)
## Put your code here
er_graph <- erdos.renyi.game(gvc, gec, type = "gnm")
degree_dist_erg <- degree.distribution(er_graph)
plot(degree_dist, log = "xy", main = " VK friend graph Vs Erdos-renyi graph", xlab = "Node Degree log", ylab = " Degree distribution log")
par(new = T)
plot(degree_dist_erg, log = "xy" ,main =" ", col= "red", axes = F)
## Put your code here
degcen <- centralization.degree(vkfg)
closecen <- centralization.closeness(vkfg, mode="all")
betcen <- centralization.betweenness (vkfg, directed = TRUE, nobigint = TRUE)
ev_cen <- centralization.evcent (vkfg, directed = TRUE, scale = FALSE, options = igraph.arpack.default)
degcen$centralization
closecen$centralization
betcen$centralization
ev_cen$centralization
## Put your code here
deg<-degree(vkfg)
lay <- layout.fruchterman.reingold(vkfg)
fine = 500
palette2 <- colorRampPalette(c('blue','red'))
degCol <- palette2(fine)[as.numeric(cut(deg,breaks = fine))]
vert_size <- ifelse(deg>30, 1/30*deg, 1)
par(mfrow=c(1,1))
plot(vkfg, layout=lay, vertex.color=degCol, vertex.size=vert_size, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Degree centrality")
## Put your code here
deg<-degree(vkfg)
lay <- layout.fruchterman.reingold(vkfg)
fine = 500
palette2 <- colorRampPalette(c('blue','red'))
degCol <- palette2(fine)[as.numeric(cut(deg,breaks = fine))]
vert_size <- ifelse(deg>30, 1/30*deg, 1)
par(mfrow=c(1,1))
plot(vkfg, layout=lay, vertex.color=degCol, vertex.size=vert_size*5, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Degree centrality")
clos <- closeness(vkfg)
closCol = palette2(fine)[as.numeric(cut(clos,breaks = fine))]
plot(vkfg,layout = lay, vertex.label=NA, vertex.color=closCol, vertex.size=clos*23000, edge.width = 0.5, edge.arrow.size = 0.5, main="Closeness centrality")
betw <- betweenness(vkfg)
betwCol = palette2(fine)[as.numeric(cut(betw,breaks = fine))]
vert_size <- ifelse(betw>210, 1/210*betw, 1)
plot(vkfg,layout = lay, vertex.color=betwCol, vertex.size=vert_size*15, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Betwenness centrality")
ev <- evcent(vkfg)$vector
evCol = palette2(fine)[as.numeric(cut(ev,breaks = fine))]
vert_size <- ifelse(ev>0.15, 5*ev, 0.8)
plot(vkfg,layout = lay, vertex.size=vert_size*10, vertex.color=evCol, vertex.label=NA, edge.width = 0.5, edge.arrow.size = 0.5, main="Eigenvector centrality")
clos <- closeness(vkfg)
closCol = palette2(fine)[as.numeric(cut(clos,breaks = fine))]
plot(vkfg,layout = lay, vertex.label=NA, vertex.color=closCol, vertex.size=clos*2300, edge.width = 0.5, edge.arrow.size = 0.5, main="Closeness centrality")
clos <- closeness(vkfg)
closCol = palette2(fine)[as.numeric(cut(clos,breaks = fine))]
plot(vkfg,layout = lay, vertex.label=NA, vertex.color=closCol, vertex.size=clos*23000, edge.width = 0.5, edge.arrow.size = 0.5, main="Closeness centrality")
flickr = readMat("flickr.mat")
fmatrix=as.matrix(flickr[1]$A)
fnames=flickr[2]$names
fnames=gsub(" ", "", fnames)
## Put your code here
flicker_net<- graph.adjacency(fmatrix, mode = "directed", weighted = NULL)
